name: Android CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4096m -XX:+HeapDumpOnOutOfMemoryError"

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    strategy:
      matrix:
        api-level: [29, 33]
        target: [default]
        arch: [x86_64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build project
      run: ./gradlew build --stacktrace

    - name: Run lint
      run: ./gradlew lintDebug

    - name: Run unit tests
      run: ./gradlew testDebugUnitTest --stacktrace

    - name: Generate test coverage report
      run: ./gradlew jacocoTestReport

    - name: Upload unit test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-${{ matrix.api-level }}
        path: |
          app/build/reports/tests/testDebugUnitTest/
          app/build/test-results/testDebugUnitTest/

    - name: Upload lint results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lint-results-${{ matrix.api-level }}
        path: app/build/reports/lint-results-debug.html

    - name: Enable KVM group permissions
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: AVD cache
      uses: actions/cache@v3
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ matrix.api-level }}

    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        target: ${{ matrix.target }}
        arch: ${{ matrix.arch }}
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."

    - name: Run instrumented tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        target: ${{ matrix.target }}
        arch: ${{ matrix.arch }}
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: |
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0
          ./gradlew connectedDebugAndroidTest --stacktrace

    - name: Upload instrumented test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: instrumented-test-results-${{ matrix.api-level }}
        path: |
          app/build/reports/androidTests/connected/
          app/build/outputs/androidTest-results/connected/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run security scan with SpotBugs
      run: ./gradlew spotbugsDebug

    - name: Upload SpotBugs results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: spotbugs-results
        path: app/build/reports/spotbugs/

    - name: Run dependency vulnerability check
      run: ./gradlew dependencyCheckAnalyze

    - name: Upload dependency check results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-check-results
        path: app/build/reports/dependency-check-report.html

  build_apk:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build release APK
      run: ./gradlew assembleRelease --stacktrace

    - name: Sign APK
      uses: r0adkll/sign-android-release@v1
      id: sign_app
      with:
        releaseDirectory: app/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
      env:
        BUILD_TOOLS_VERSION: "34.0.0"

    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: release-apk
        path: ${{steps.sign_app.outputs.signedReleaseFile}}

    - name: Create Release
      if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{steps.sign_app.outputs.signedReleaseFile}}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  performance_test:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build benchmark APK
      run: ./gradlew assembleBenchmark

    - name: Run performance benchmarks
      run: ./gradlew connectedBenchmarkAndroidTest || true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: |
          app/build/outputs/connected_android_test_additional_output/
          app/build/reports/benchmark/

  code_quality:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build and analyze with SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        ./gradlew build sonarqube --info --stacktrace \
          -Dsonar.projectKey=nasplayer \
          -Dsonar.organization=your-org \
          -Dsonar.host.url=https://sonarcloud.io

    - name: Run Detekt
      run: ./gradlew detekt

    - name: Upload Detekt results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: detekt-results
        path: app/build/reports/detekt/

  notification:
    runs-on: ubuntu-latest
    needs: [test, security, code_quality]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.security.result == 'success' && needs.code_quality.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        # Add Slack/Discord/Email notification here if needed

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' || needs.code_quality.result == 'failure' }}
      run: |
        echo "❌ Some checks failed!"
        echo "Test result: ${{ needs.test.result }}"
        echo "Security result: ${{ needs.security.result }}"
        echo "Code quality result: ${{ needs.code_quality.result }}"
        # Add failure notification here if needed

  cleanup:
    runs-on: ubuntu-latest
    needs: [test, security, build_apk, performance_test, code_quality]
    if: always()

    steps:
    - name: Clean up artifacts
      run: |
        echo "Cleaning up temporary artifacts..."
        # Artifacts are automatically cleaned up by GitHub after retention period
        echo "✅ Cleanup completed"